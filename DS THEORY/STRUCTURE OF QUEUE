#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

struct Queue {
    int front, rear;
    int queue[MAX_SIZE];
};

void initializeQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

void insert(struct Queue* q, int element) {
    if (q->rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot insert element.\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->queue[q->rear] = element;
        printf("Inserted %d into the queue.\n", element);
    }
}

void removeElement(struct Queue* q) {
    if (q->front == -1) {
        printf("Queue is empty. Cannot delete element.\n");
    } else {
        int deletedElement = q->queue[q->front];
        if (q->front == q->rear) {
            q->front = -1;
            q->rear = -1;
        } else {
            q->front++;
        }
        printf("Deleted element: %d\n", deletedElement);
    }
}

void display(struct Queue* q) {
    if (q->front == -1) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->queue[i]);
        }
        printf("\n");
    }
}

int main() {
    struct Queue q;
    initializeQueue(&q);
    int choice, element;

    do {
        printf("\n1. Insert Element\n2. Delete Element\n3. Display Queue\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to insert: ");
                scanf("%d", &element);
                insert(&q, element);
                break;

            case 2:
                removeElement(&q);/tmp/n7Alht761I.o
1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 1
Enter element to insert: 5
Inserted 5 into the queue.

1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 2
Deleted element: 5

1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 3
Queue is empty.

1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 
1
Enter element to insert: 5
Inserted 5 into the queue.

1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 3
Queue elements: 5 

1. Insert Element
2. Delete Element
3. Display Queue
4. Exit
Enter your choice: 4
Exiting the program.

                break;

            case 3:
                display(&q);
                break;

            case 4:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}

OUTPUT :





