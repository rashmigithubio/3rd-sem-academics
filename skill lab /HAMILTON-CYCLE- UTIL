#include<stdio.h>
#include<stdbool.h>
#define V 5
void printSolution(int path[]);
bool isSafe(int v,bool graph[V][V],int path[],int pos) {
    if(!graph[path[pos -1]][v])
    return false;
    for(int i=0;i<pos;i++)
    if(path[i]==v)
    return false;
    return true ;
}
bool hamiltonCycleUtil(bool graph[V][V],int path[],int pos) {
    if (pos == V) {
        if(graph[path[pos -1]] [path[0]]) {
            printSolution(path);
            return true;
        } else {
            return false;
        }
    }
    bool foundcycle = false;
    for (int v=1;v<V;v++) {
        if(isSafe(v,graph,path,pos)) {
            path[pos] = v;
            foundcycle=hamiltonCycleUtil(graph,path,pos+1)||foundcycle;
            path[pos] = -1;
        }
    }
    return foundcycle;
}
bool hamiltonCycle(bool grpah[V][V]) {
    int path[V];
    for(int i=0;i<V;i++)
    path[i]=-1;
    path[0]=0;
    if(!hamiltonCycleUtil(grpah,path,1)) {
        printf("Haimltonian cycle does not exist.\n");
        return false;
    }
    printf("Hamiltonain cycle exits:\n");
    return true;
}
void printSolution(int path[]) {
    for(int i=0;i<V;i++)
    printf("%d",path[i]);
    printf("%d",path[0]);
    printf("\n");
}
int main() {
    bool graph[V][V] = {
        {0,1,1,1,0},
        {1,0,1,0,1},
        {1,1,0,1,1},
        {1,0,1,0,1},
        {0,1,1,1,0}
    };
    hamiltonCycle(graph);
    return 0;


OUTPUT:

/tmp/Oxh8LgNoZS.o
012430
014230
014320
021430
023410
032410
034120
034210
Hamiltonain cycle exits:
